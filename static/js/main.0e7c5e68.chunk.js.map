{"version":3,"sources":["components/Filter.js","components/EditableCell.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Filter","columns","className","map","column","key","id","type","getToggleHiddenProps","Header","EditableCell","initialValue","cell","value","index","row","updateData","React","useState","setValue","useEffect","onChange","event","target","onBlur","Table","data","defaultColumn","useMemo","width","minWidth","maxWidth","Cell","useTable","useSortBy","useFlexLayout","useResizeColumns","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","flatColumns","state","columnResizing","hiddenColumns","bodyProps","RenderRow","useCallback","style","getRowProps","cells","getCellProps","render","headerGroup","getHeaderGroupProps","paddingRight","headers","getHeaderProps","getSortByToggleProps","canSort","getResizerProps","height","itemCount","length","itemSize","App","setData","setErrors","fetch","then","res","json","catch","err","columnsData","accessor","sortType","disableSortBy","rowsData","rowIndex","columnId","old","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e7c5e68.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Filter.css';\r\n\r\nexport default function Filter({ columns }) {\r\n  return (\r\n    <div className=\"filter\">\r\n      <h3>Filter</h3>\r\n      <ul className=\"filter-list\">\r\n        {columns.map(column => (\r\n          <li key={column.id} className=\"filter-elem\">\r\n            <label className=\"filter-label\">\r\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} /> {column.Header}\r\n            </label>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './EditableCell.css';\r\n\r\nexport default function EditableCell({\r\n  cell: { value: initialValue },\r\n  row: { index },\r\n  column: { id },\r\n  updateData\r\n}) {\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  const onChange = event => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const onBlur = () => {\r\n    updateData(index, id, value);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue]);\r\n\r\n  return <input value={value} onChange={onChange} onBlur={onBlur} className=\"editable-cell\" />;\r\n}\r\n","import React, { useMemo, useCallback } from 'react';\r\nimport { useTable, useSortBy, useFlexLayout, useResizeColumns } from 'react-table';\r\nimport { FixedSizeList } from 'react-window';\r\nimport Filter from './Filter';\r\nimport EditableCell from './EditableCell';\r\nimport './Table.css';\r\n\r\nexport default function Table({ columns, data, updateData }) {\r\n  const defaultColumn = useMemo(\r\n    () => ({\r\n      width: 150,\r\n      minWidth: 50,\r\n      maxWidth: 300,\r\n      Cell: EditableCell\r\n    }),\r\n    []\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    flatColumns,\r\n    state,\r\n    state: { columnResizing, hiddenColumns }\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      updateData\r\n    },\r\n    useSortBy,\r\n    useFlexLayout,\r\n    useResizeColumns\r\n  );\r\n\r\n  const bodyProps = { ...getTableBodyProps() };\r\n\r\n  const RenderRow = useCallback(\r\n    ({ index, style }) => {\r\n      const row = rows[index];\r\n      prepareRow(row);\r\n      return (\r\n        <div\r\n          {...row.getRowProps({\r\n            style\r\n          })}\r\n          className=\"tr\"\r\n        >\r\n          {row.cells.map(cell => {\r\n            return (\r\n              <div {...cell.getCellProps()} className=\"td\">\r\n                {cell.render('Cell')}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    },\r\n    [rows, columnResizing, hiddenColumns]\r\n  );\r\n\r\n  return (\r\n    <div className=\"table-wrapper\">\r\n      <div className=\"filter-wrapper\">\r\n        <Filter columns={flatColumns} />\r\n      </div>\r\n\r\n      <div {...getTableProps()} className=\"table\">\r\n        <div className=\"thead\" style={bodyProps.style}>\r\n          {headerGroups.map(headerGroup => (\r\n            <div\r\n              {...headerGroup.getHeaderGroupProps({ style: { paddingRight: '15px' } })}\r\n              className=\"tr\"\r\n            >\r\n              {headerGroup.headers.map(column => (\r\n                <div {...column.getHeaderProps()} className=\"th\">\r\n                  <div {...column.getSortByToggleProps()} className=\"th-sortable\">\r\n                    {column.render('Header')}\r\n                    {column.canSort && <span> (sortable)</span>}\r\n                  </div>\r\n                  <div {...column.getResizerProps()} className=\"resizer\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div {...bodyProps} className=\"tbody\">\r\n          <FixedSizeList height={450} itemCount={rows.length} itemSize={35}>\r\n            {RenderRow}\r\n          </FixedSizeList>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport Table from './components/Table';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [errors, setErrors] = useState(false);\r\n\r\n  function fetchData() {\r\n    fetch('./data.json')\r\n      .then(res => res.json())\r\n      .then(res => setData(res))\r\n      .catch(err => setErrors(err));\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const columnsData = useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'name',\r\n        sortType: 'basic'\r\n      },\r\n      {\r\n        Header: 'Phone',\r\n        accessor: 'phone',\r\n        disableSortBy: true\r\n      },\r\n      {\r\n        Header: 'Email',\r\n        accessor: 'email',\r\n        disableSortBy: true\r\n      },\r\n      {\r\n        Header: 'Postal code',\r\n        accessor: 'postal_code',\r\n        disableSortBy: true\r\n      },\r\n      {\r\n        Header: 'Country',\r\n        accessor: 'country'\r\n      },\r\n      {\r\n        Header: 'City',\r\n        accessor: 'city'\r\n      }\r\n    ],\r\n    []\r\n  );\r\n  const rowsData = useMemo(() => data, [data]);\r\n\r\n  function updateData(rowIndex, columnId, value) {\r\n    setData(old =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex],\r\n            [columnId]: value\r\n          };\r\n        }\r\n        return row;\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Table columns={columnsData} data={rowsData} updateData={updateData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}