{"version":3,"sources":["components/Filter.js","components/IndeterminateCheckbox.js","components/Row.js","components/EditableCell.js","components/Info.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Filter","columns","className","map","column","key","id","type","getToggleHiddenProps","Header","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","Row","row","prepareRow","style","onCellMouseEnter","onCellMouseLeave","getRowProps","cells","cell","getCellProps","data-column-id","onMouseEnter","onMouseLeave","render","EditableCell","initialValue","value","index","updateData","React","useState","setValue","onChange","event","target","onBlur","Info","selectedRowIds","selectedFlatRows","JSON","stringify","original","Table","data","defaultColumn","useMemo","width","minWidth","maxWidth","Cell","useTable","useSortBy","useFlexLayout","useResizeColumns","useRowSelect","hooks","flatColumns","push","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","state","columnResizing","hiddenColumns","tableRef","classList","add","remove","RenderRow","useCallback","bodyProps","headerGroup","getHeaderGroupProps","paddingRight","headers","getHeaderProps","getSortByToggleProps","canSort","getResizerProps","height","itemCount","length","itemSize","App","setData","setErrors","fetch","then","res","json","catch","err","columnsData","accessor","sortType","disableSortBy","rowsData","rowIndex","columnId","old","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23d73f51.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Filter.scss';\r\n\r\nexport default function Filter({ columns }) {\r\n  return (\r\n    <div className=\"filter\">\r\n      <h3>Filter</h3>\r\n      <ul className=\"filter-list\">\r\n        {columns.map(column => (\r\n          <li key={column.id} className=\"filter-elem\">\r\n            <label className=\"filter-label\">\r\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} /> {column.Header}\r\n            </label>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { forwardRef, useRef, useEffect } from 'react';\r\n\r\nconst IndeterminateCheckbox = forwardRef(({ indeterminate, ...rest }, ref) => {\r\n  const defaultRef = useRef();\r\n  const resolvedRef = ref || defaultRef;\r\n\r\n  useEffect(() => {\r\n    resolvedRef.current.indeterminate = indeterminate;\r\n  }, [resolvedRef, indeterminate]);\r\n\r\n  return (\r\n    <>\r\n      <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n    </>\r\n  );\r\n});\r\n\r\nexport default IndeterminateCheckbox;\r\n","import React from 'react';\r\nimport './Row.scss';\r\n\r\nexport default function Row({ row, prepareRow, style, onCellMouseEnter, onCellMouseLeave }) {\r\n  prepareRow(row);\r\n  return (\r\n    <div\r\n      {...row.getRowProps({\r\n        style\r\n      })}\r\n      className=\"tr\"\r\n    >\r\n      {row.cells.map(cell => (\r\n        <div\r\n          {...cell.getCellProps()}\r\n          className=\"td\"\r\n          data-column-id={cell.column.id}\r\n          onMouseEnter={() => onCellMouseEnter(cell)}\r\n          onMouseLeave={() => onCellMouseLeave(cell)}\r\n        >\r\n          {cell.render('Cell')}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './EditableCell.scss';\r\n\r\nexport default function EditableCell({\r\n  cell: { value: initialValue },\r\n  row: { index },\r\n  column: { id },\r\n  updateData\r\n}) {\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  const onChange = event => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const onBlur = () => {\r\n    updateData(index, id, value);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue]);\r\n\r\n  return <input value={value} onChange={onChange} onBlur={onBlur} className=\"editable-cell\" />;\r\n}\r\n","import React from 'react';\r\nimport './Info.scss';\r\n\r\nexport default function Info({ selectedRowIds, selectedFlatRows }) {\r\n  return (\r\n    <div className=\"info\">\r\n      <h4>Selected rows:</h4>\r\n      <div className=\"info-block\">\r\n        <pre>\r\n          <code>\r\n            {JSON.stringify(\r\n              {\r\n                'Selected Row Ids': selectedRowIds,\r\n                'Selected Rows': selectedFlatRows.map(row => row.original)\r\n              },\r\n              null,\r\n              2\r\n            )}\r\n          </code>\r\n        </pre>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useMemo, useCallback } from 'react';\r\nimport { useTable, useSortBy, useFlexLayout, useResizeColumns, useRowSelect } from 'react-table';\r\nimport { FixedSizeList } from 'react-window';\r\nimport Filter from './Filter';\r\nimport IndeterminateCheckbox from './IndeterminateCheckbox';\r\nimport Row from './Row';\r\nimport EditableCell from './EditableCell';\r\nimport Info from './Info';\r\nimport './Table.scss';\r\n\r\nexport default function Table({ columns, data, updateData }) {\r\n  const defaultColumn = useMemo(\r\n    () => ({\r\n      width: 150,\r\n      minWidth: 50,\r\n      maxWidth: 300,\r\n      Cell: EditableCell\r\n    }),\r\n    []\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    selectedFlatRows,\r\n    flatColumns,\r\n    state: { columnResizing, hiddenColumns, selectedRowIds }\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      updateData\r\n    },\r\n    useSortBy,\r\n    useFlexLayout,\r\n    useResizeColumns,\r\n    useRowSelect,\r\n    hooks => {\r\n      hooks.flatColumns.push(columns => [\r\n        {\r\n          id: 'selection',\r\n          Header: ({ getToggleAllRowsSelectedProps }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n            </div>\r\n          ),\r\n          Cell: ({ row }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n            </div>\r\n          )\r\n        },\r\n        ...columns\r\n      ]);\r\n    }\r\n  );\r\n\r\n  // Used for columns highlighting\r\n  const tableRef = useRef(null);\r\n\r\n  const onCellMouseEnter = cell => {\r\n    tableRef.current.classList.add(`active-col-${cell.column.id}`);\r\n  };\r\n\r\n  const onCellMouseLeave = cell => {\r\n    tableRef.current.classList.remove(`active-col-${cell.column.id}`);\r\n  };\r\n\r\n  // Used for virtualization via react-window\r\n  const RenderRow = useCallback(\r\n    ({ index, style }) => {\r\n      const row = rows[index];\r\n\r\n      return (\r\n        <Row\r\n          row={row}\r\n          prepareRow={prepareRow}\r\n          style={style}\r\n          onCellMouseEnter={onCellMouseEnter}\r\n          onCellMouseLeave={onCellMouseLeave}\r\n        />\r\n      );\r\n    },\r\n    [rows, columnResizing, hiddenColumns, selectedRowIds]\r\n  );\r\n\r\n  const bodyProps = { ...getTableBodyProps() };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"table-wrapper\">\r\n        <div className=\"filter-wrapper\">\r\n          <Filter columns={flatColumns} />\r\n        </div>\r\n\r\n        <div {...getTableProps()} className=\"table\" ref={tableRef}>\r\n          <div className=\"thead\" style={bodyProps.style}>\r\n            {headerGroups.map(headerGroup => (\r\n              <div\r\n                {...headerGroup.getHeaderGroupProps({ style: { paddingRight: '15px' } })}\r\n                className=\"tr\"\r\n              >\r\n                {headerGroup.headers.map(column => (\r\n                  <div {...column.getHeaderProps()} className=\"th\" data-column-id={column.id}>\r\n                    <div {...column.getSortByToggleProps()} className=\"th-sortable\">\r\n                      {column.render('Header')}\r\n                      {column.canSort && <span> (sortable)</span>}\r\n                    </div>\r\n                    <div {...column.getResizerProps()} className=\"resizer\"></div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div {...bodyProps} className=\"tbody\">\r\n            <FixedSizeList height={450} itemCount={rows.length} itemSize={35}>\r\n              {RenderRow}\r\n            </FixedSizeList>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Info selectedRowIds={selectedRowIds} selectedFlatRows={selectedFlatRows} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport Table from './components/Table';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [errors, setErrors] = useState(false);\r\n\r\n  function fetchData() {\r\n    fetch('./data.json')\r\n      .then(res => res.json())\r\n      .then(res => setData(res))\r\n      .catch(err => setErrors(err));\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const columnsData = useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'name',\r\n        sortType: 'basic'\r\n      },\r\n      {\r\n        Header: 'Phone',\r\n        accessor: 'phone',\r\n        disableSortBy: true\r\n      },\r\n      {\r\n        Header: 'Email',\r\n        accessor: 'email',\r\n        disableSortBy: true\r\n      },\r\n      {\r\n        Header: 'Postal code',\r\n        accessor: 'postal_code',\r\n        disableSortBy: true\r\n      },\r\n      {\r\n        Header: 'Country',\r\n        accessor: 'country'\r\n      },\r\n      {\r\n        Header: 'City',\r\n        accessor: 'city'\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const rowsData = useMemo(() => data, [data]);\r\n\r\n  function updateData(rowIndex, columnId, value) {\r\n    setData(old =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex],\r\n            [columnId]: value\r\n          };\r\n        }\r\n        return row;\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Table columns={columnsData} data={rowsData} updateData={updateData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}